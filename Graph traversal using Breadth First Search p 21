
#include <stdio.h>
#include <stdlib.h>
#define SIZE 100

int adj[SIZE][SIZE];     // Adjacency matrix
int visited[SIZE];       // Visited array
int queue[SIZE];         // Queue for BFS
int front = -1, rear = -1;

// Enqueue operation
void enqueue(int v) {
    if (rear == SIZE - 1) {
        printf("Queue Overflow\n");
        return;
    }
    if (front == -1) front = 0;
    queue[++rear] = v;
}

// Dequeue operation
int dequeue() {
    if (front == -1 || front > rear)
        return -1;
    return queue[front++];
}

// BFS function
void bfs(int start, int n) {
    int i, current;
    enqueue(start);
    visited[start] = 1;

    printf("BFS Traversal: ");

    while ((current = dequeue()) != -1) {
        printf("%d ", current);
        for (i = 0; i < n; i++) {
            if (adj[current][i] == 1 && !visited[i]) {
                enqueue(i);
                visited[i] = 1;
            }
        }
    }

    printf("\n");
}

int main() {
    int n = 4; // Number of vertices

    // Example adjacency matrix (undirected graph)
    // 0-1, 0-2, 1-2, 2-3
    adj[0][1] = adj[1][0] = 1;
    adj[0][2] = adj[2][0] = 1;
    adj[1][2] = adj[2][1] = 1;
    adj[2][3] = adj[3][2] = 1;

    // Initialize visited to 0
    for (int i = 0; i < n; i++)
        visited[i] = 0;

    bfs(0, n);  // Start BFS from vertex 0

    return 0;
}
