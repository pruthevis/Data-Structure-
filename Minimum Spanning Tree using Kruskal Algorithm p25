
#include <stdio.h>

#define MAX 10

int parent[MAX];

// Find function for DSU
int find(int i) {
    while (parent[i])
        i = parent[i];
    return i;
}

// Union function for DSU
void union_set(int i, int j) {
    parent[j] = i;
}

int main() {
    int edges[MAX][3]; // Each row = {u, v, weight}
    int n = 4;         // Number of vertices
    int e = 5;         // Number of edges

    // Sample graph edges
    // (u, v, weight)
    edges[0][0] = 0; edges[0][1] = 1; edges[0][2] = 2;
    edges[1][0] = 1; edges[1][1] = 3; edges[1][2] = 3;
    edges[2][0] = 0; edges[2][1] = 2; edges[2][2] = 6;
    edges[3][0] = 1; edges[3][1] = 2; edges[3][2] = 5;
    edges[4][0] = 2; edges[4][1] = 3; edges[4][2] = 4;

    // Sort edges by weight using simple Bubble Sort
    for (int i = 0; i < e - 1; i++) {
        for (int j = 0; j < e - i - 1; j++) {
            if (edges[j][2] > edges[j + 1][2]) {
                int temp0 = edges[j][0], temp1 = edges[j][1], temp2 = edges[j][2];
                edges[j][0] = edges[j + 1][0];
                edges[j][1] = edges[j + 1][1];
                edges[j][2] = edges[j + 1][2];
                edges[j + 1][0] = temp0;
                edges[j + 1][1] = temp1;
                edges[j + 1][2] = temp2;
            }
        }
    }

    int totalCost = 0;
    printf("Edges in MST:\n");

    for (int i = 0; i < e; i++) {
        int u = edges[i][0];
        int v = edges[i][1];
        int wt = edges[i][2];

        int set_u = find(u);
        int set_v = find(v);

        if (set_u != set_v) {
            printf("Edge: %d - %d cost %d\n", u, v, wt);
            totalCost += wt;
            union_set(set_u, set_v);
        }
    }

    printf("Total cost of MST: %d\n", totalCost);

    return 0;
}
